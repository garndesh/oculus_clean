apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'


mainClassName = "garndesh.openglrenderer.Start"
def nativeLibs = "$buildDir/natives/windows/"

sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version:'2.9.+'
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version:'2.9.+'
    compile group: 'org.saintandreas', name: 'jovr', version:'0.4.4.0'
    compile group: 'org.saintandreas', name: 'glamour-lwjgl', version:'2.0.+'
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}


def platforms = ['windows', 'linux', 'osx']
platforms.each { platform ->
    task "${platform}Natives" {
        def outputDir = "$buildDir/natives/$platform"
        inputs.files(configurations.compile)
        outputs.dir(outputDir)
        doLast {
            copy {
                def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
                    .findAll { it.classifier == "natives-$platform" }
                artifacts.each { 
                    from zipTree(it.file)
                }            
                into outputDir
            }
        }
    }
}
task natives {
    description "Copies native libraries to an appropriate directory."
    dependsOn platforms.collect { "${it}Natives" }.findAll { tasks[it] }
    //systemProperty "java.library.path", outputs.dir(nativeLibs)
}

tasks.withType(Test) { systemProperty "java.library.path", nativeLibs }
tasks.withType(JavaExec) { 
	systemProperty "java.library.path", nativeLibs 
}


test {
    systemProperties 'property': 'value'
    println systemProperties
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
